# Build Stage 1: Dependencies
FROM node:22-alpine AS deps
WORKDIR /app

# Enable pnpm
RUN corepack enable

# Copy only package files to leverage Docker cache
COPY package.json ./

# Install dependencies without requiring lockfile and with optimizations
RUN pnpm i --no-frozen-lockfile --prefer-offline --shamefully-hoist

# Build Stage 2: Build
FROM node:22-alpine AS build
WORKDIR /app

# Enable pnpm
RUN corepack enable

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy source files
COPY . ./

# Set build arguments for optimization
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}
ENV NUXT_TELEMETRY_DISABLED=1

# Build the project with optimizations
RUN NODE_OPTIONS="--max-old-space-size=4096" pnpm run build

# Build Stage 3: Runtime
FROM node:22-alpine AS runtime
WORKDIR /app

# Set runtime environment variables
ENV NODE_ENV=production
ENV PORT=3000
ENV HOST=0.0.0.0
ENV NUXT_TELEMETRY_DISABLED=1

# Copy only the necessary output files
COPY --from=build /app/.output/ ./

# Expose the port
EXPOSE 3000

# Start the server
CMD ["node", "/app/server/index.mjs"]
